// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Manufacturer {
  manufacturer_id String    @id @default(auto()) @map("_id") @db.ObjectId
  company_name    String    @unique
  email           String    @unique
  phone           String
  password        String
  website         String?
  GST_No          String    @unique
  address         Manufacturer_Address[] // One-to-many relationship with Address
  medicines       MedicinesGallery[] // One-to-many relationship with MedicinesGallery
  orders          Order[] // One-to-many relationship with Order
}

model Manufacturer_Address {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  street          String
  city            String
  state           String
  postal_code     String
  country         String
  manufacturer_id String    @db.ObjectId // Foreign key
  manufacturer    Manufacturer @relation(fields: [manufacturer_id], references: [manufacturer_id])
}

model MedicinesGallery {
  medicine_id      String    @id @default(auto()) @map("_id") @db.ObjectId
  medicine_name    String
  category_name    String
  batches          Batch[]
  sales            Sale[]
  manufacturer     Manufacturer @relation(fields: [manufacturer_id], references: [manufacturer_id])
  manufacturer_id  String    @db.ObjectId
}

model Batch {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  batch_id         String    @unique
  manufacture_date DateTime
  expiry_date      DateTime
  expiry_status    String
  quantity         Int  
  current_stock    Int // Track remaining stock for this batch
  reorder_threshold Int  // Minimum stock before reorder is triggered
  strip_quantity   Int    @default(0)
  tablets_per_strip Int   @default(0)
  mrp              Float
  selling_price    Float
  cost_price       Float
  batch_status     String
  medicines         MedicinesGallery @relation(fields: [medicine_id], references: [medicine_id])
  medicine_id      String    @db.ObjectId
}

model Sale {
  sale_id          String    @id @default(auto()) @map("_id") @db.ObjectId
  batch_id         String
  sold_to          String
  sale_date        DateTime
  quantity_sold    Int
  discount_rate    Float?
  final_price      Float
  product          MedicinesGallery @relation(fields: [medicine_id], references: [medicine_id])
  medicine_id      String    @db.ObjectId
}

model Order {
  order_id         String    @id @default(auto()) @map("_id") @db.ObjectId
  order_date       DateTime
  delivery_date    DateTime?
  status           String    // e.g., 'pending', 'shipped', 'delivered'
  total_quantity   Int
  total_price      Float
  retailer_id      String    @db.ObjectId
  manufacturer_id  String    @db.ObjectId
  manufacturer     Manufacturer @relation(fields: [manufacturer_id], references: [manufacturer_id])
  order_items      OrderItem[] // One-to-many relationship with OrderItem
}

model OrderItem {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  order_id         String    @db.ObjectId
  batch_id         String    @db.ObjectId
  quantity         Int
  medicine_id      String    @db.ObjectId
  order            Order @relation(fields: [order_id], references: [order_id])
}


model Wholesaler {
  wholesaler_id    String    @id @default(auto()) @map("_id") @db.ObjectId
  wholesaler_name     String    @unique
  email            String    @unique
  phone            String
  password         String
  website          String?
  GST_No           String    @unique
  address          Wholesaler_Address[] // One-to-many relationship with Address
  medicines        Wholesaler_Medicines[] // One-to-many relationship with MedicinesGallery
  orders           Wholesaler_Order[] // One-to-many relationship with Order
  oreder_received  Wholesaler_Order_received[] // One-to-many relationship with Order_received
}

model Wholesaler_Address {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  street           String
  city             String
  state            String
  postal_code      String
  country          String
  wholesaler_id    String    @db.ObjectId // Foreign key
  wholesaler       Wholesaler @relation(fields: [wholesaler_id], references: [wholesaler_id])
}
model Wholesaler_Medicines {
  medicine_id      String    @id @default(auto()) @map("_id") @db.ObjectId
  medicine_name    String
  category_name    String
  batches          Wholesaler_Batch[]
  bought           Wholesaler_Bought[]
  sold             Wholesaler_Sold[]
  wholesaler       Wholesaler @relation(fields: [wholesaler_id], references: [wholesaler_id])
  wholesaler_id    String    @db.ObjectId
}

model Wholesaler_Batch {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  batch_id         String    @unique
  manufacture_date DateTime
  expiry_date      DateTime
  expiry_status    String
  quantity         Int  
  current_stock    Int // Track remaining stock for this batch
  reorder_threshold Int  // Minimum stock before reorder is triggered
  strip_quantity   Int    @default(0)
  tablets_per_strip Int   @default(0)
  mrp              Float
  selling_price    Float
  cost_price       Float
  batch_status     String
  medicines         Wholesaler_Medicines @relation(fields: [medicine_id], references: [medicine_id])
  medicine_id      String    @db.ObjectId
}

model Wholesaler_Sold {
  sale_id          String    @id @default(auto()) @map("_id") @db.ObjectId
  batch_id         String
  sold_to          String
  sale_date        DateTime
  quantity_sold    Int
  discount_rate    Float?
  final_price      Float
  product          Wholesaler_Medicines @relation(fields: [medicine_id], references: [medicine_id])
  medicine_id      String    @db.ObjectId
}
model Wholesaler_Bought {
  sale_id          String    @id @default(auto()) @map("_id") @db.ObjectId
  batch_id         String
  bought_date        DateTime
  quantity_sold    Int
  discount_rate    Float?
  final_price      Float
  product          Wholesaler_Medicines @relation(fields: [medicine_id], references: [medicine_id])
  medicine_id      String    @db.ObjectId
}
model Wholesaler_Order {
  order_id         String    @id @default(auto()) @map("_id") @db.ObjectId
  order_date       DateTime
  delivery_date    DateTime?
  status           String @default("pending")    // e.g., 'pending', 'shipped', 'delivered'
  total_quantity   Int
  total_price      Float
  manufacturer_id  String  
  wholesaler_id    String    @db.ObjectId
  wholesaler       Wholesaler @relation(fields: [wholesaler_id], references: [wholesaler_id])
  order_items      Wholesaler_OrderItem[] // One-to-many relationship with OrderItem
}

model Wholesaler_OrderItem {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  order_id         String    @db.ObjectId
  batch_id         String    @db.ObjectId
  quantity         Int
  medicine_name    String
  medicine_id      String    @db.ObjectId
  order            Wholesaler_Order @relation(fields: [order_id], references: [order_id])
}
model Wholesaler_Order_received {
  order_id         String    @id @default(auto()) @map("_id") @db.ObjectId
  order_date       DateTime
  delivery_date    DateTime?
  status           String    // e.g., 'pending', 'shipped', 'delivered'
  total_quantity   Int
  total_price      Float
  retailer_id      String    @db.ObjectId

  wholesaler_id    String    @db.ObjectId
  wholesaler       Wholesaler @relation(fields: [wholesaler_id], references: [wholesaler_id])
  order_items      Wholesaler_Order_received_item[]
}


model Wholesaler_Order_received_item {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  order_id         String    @db.ObjectId
  batch_id         String    @db.ObjectId
  quantity         Int
  medicine_name    String
  medicine_id      String    @db.ObjectId
  order            Wholesaler_Order_received @relation(fields: [order_id], references: [order_id])
}

